/**
 * 
 * 事件:就是一件事,需要有事件源,事件类型,回调函数
 * 事件的触发和执行
 * 点击事件:按钮---事件源,点击事件就是事件类型,该事件绑定的回调函数,内部的代码就是事件触发的时候要执行的操作
 * 事件的绑定和触发
 * 绑定事件监听,触发就是要做的事情
 * 系统的自带的事件DOM中:onclick,onmouseenter,onmouseleave,onmouseover,onmouseout,onkeyup
 * Vue中的事件:干掉了on,使用@符号来进行绑定事件的操作
 * @click="回调函数"
 * click----系统自带的,点击了按钮,点击事件就会自动的触发
 * 自定义的事件:(不是系统自带的,而是根据需求,系统的事件无法满足当前的需求,需要自己定义的事件)
 * 系统的事件,可以在触发的时候,自动的进行执行(自动的进行分发操作)
 * 自定义的事件,需要自己手动的分发才可以执行绑定该事件监听的回调函数内部的代码
 * 
 * 在todoList案例中,要进行组件之间的通信操作(除了props以外其他的方式)
 * 自定义事件的方式
 * 自定义事件:事件名字随便写,但是要有意义,并且符合驼峰命名法,也需要绑定事件监听(回调函数)
 * 该回调函数需要在你自己使用的时候自己手动的分发(触发)即可
 * 
 * App组件内部自定义事件,传入到Header组件内部,Header组件内部回车的时候分发该事件即可(执行回调函数)
 * 
 * 组件之间通信的方式:
 * 1. props:父级组件向子级组件传递数据,同时子级组件也可以向父级组件传递数据
 * 2. 自定义事件:父级组件向子级组件传递数据,同时子级组件也可以向父级组件传递数据
 * 3. PubSub(发布/订阅):任意组件之间实现通信
 *  1)要先引入PubSub插件包
 *  2)在页面加载后订阅消息----和绑定事件监听一个道理
 *  3)在某个组件内部需要进行的操作的位置中(先在该组件内部引入PubSub)发布消息,并传入参数---相当于分发事件
 * 4. 事件总线啊:任意组件之间实现通信
 * Vue的原型上绑定一个属性$bus,该属性中存储的是Vue的实例对象
 * 其他组件可以通过this.$bus获取Vue的实例对象
 * 从而:this.$bus.$on('事件名字',回调函数)绑定事件
 * 任意组件中都可以使用this.$bus.$emit('事件名字',回调函数需要的参数)分发事件
 * 
 * 小总结：PubSub是别人封装的,独立存在的一个插件包,和Vue没有关系,Vue中可以使用
 * 但是,Vue中可以通过事件总线实现PubSub的功能
 * 
 * 
 * 
 */