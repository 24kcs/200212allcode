/**
 * 
 * 1.复习
 * Vue的脚手架2的下载和使用
 * https://cli.vuejs.org/zh/ Vue脚手架的网站  已经更新到了脚手架3了
 * https://github.com/vuejs/vue-cli/tree/v2#vue-cli-- 脚手架2的github地址
 * npm install -g vue-cli  下载脚手架的命令   下载安装一次即可
 * vue init webpack my-project  下载模版   可以执行多次
 * npm run dev 或者npm start 启动项目(模版)
 * npm run build 打包
 * serve dist 运行打包文件   (serve 需要全局安装一下)
 * 组件:具有特定功能效果的集合(html+css+js)
 * .vue文件就是一个组件文件,内部可以设置当前这个组件的名字,每个组件都是一个对象,叫组件对象
 * 组件文件内部暴露出了一个对象,就是该组件对象,每个组件对象本身也有自己实例对象
 * 
 * 举例: Person是一个对象,内部也有自己的实例对象
 * 
 * function Person (){}  Person是函数,也是构造函数,也是对象,函数式对象
 * var obj = new Person()  obj 是Person的实例对象,内部的this就是当前的obj(实例对象)
 * 
 * 注意:
 *  1) 一般情况组件内部都会有一个name属性,设置该组件名字(打开浏览器,通过Vue的浏览器插件可以清楚的看到组件的名字)
 *  2) data在定义的时候是一个函数,内部返回的是一个对象
 * 例子:
 * function f1(){
 *   return {}
 * }
 * f1() ---->产生了一个新的对象----属于当前这个组件对象的----组件A
 * f1()----->产生了一个新的对象----属于当前这个组件对象的----组件B
 * 此时是把data通过f1的方式来进行展示,说明问题
 * 
 * 组件和组件的关系: 父子关系(直接的父子关系或者是间接的父子关系(爷爷。。。)),兄弟关系(同级别的组件关系)
 * 组件和组件之间传递数据,传递数据的这种方式:组件之间的通信
 * 组件之间通信的方式:
 * props:父子组件之间通信(直接父子,间接父子),
 * 父级组件---->向---->子级组件传递数据  通过强制绑定数据的方式传递属性值
 * 子级组件---->向---->父级组件传递数据  通过强制绑定数据的方式传递函数
 * props的写法:
 *   1). props:['属性名字']
 *   2). props:{属性名字:类型}
 *   3). props:{属性名字:{type:类型,required:布尔类型值-----是否是必须的}}
 * 2.课程介绍
 *  todoList案例---完善基本功能
 *  通过todoList案例----实现组件之间通信(升级改造的过程,讲解各种组件之间的通信方式--基础)
 *  自己实现事件总线的代码---原理
 *  自己实现PubSub的代码---原理
 *  Mint-UI的简单使用的演示(babel的配置)
 *  vue-resource---的使用
 *  axios----的使用
 *  案例:通过axios的方式来获取github的用户信息
 *  vue-router---路由器
 *  
 * 
 * 
 * 
 * 3.开始讲解
 * 
 * 
 * 
 * 
 * 
 */