/**
 * v-for指令遍历数据的案例
 * 
 * Vue中的事件处理
 * Vue中如何获取事件参数对象  $event
 * 
 * 
 * 
 * 为元素绑定事件,使用v-on指令,可以简写----> @事件名字="回调函数"
 * 在Vue中如果获取事件的事件参数对象(事件对应的回调函数中的参数--和事件相关的参数对象)
 * @事件名字="回调函数($event)" 
 * @事件名字="回调函数(普通参数,$event)"
 * 下面的方式属于原生js的方式来获取参数对象
 * 在methods对象中的方法中,不传入任何的参数,直接通过arguments[0]也可以获取事件参数对象
 * sayHi(){console.log(arguments[0])}----事件参数对象
 * sayHi(e){console.log(e)}----事件参数对象
 * 
 * 事件的修饰符
 * .prevent---->阻止浏览器的默认行为,点击超链接不跳转
 * .stop----->阻止事件冒泡
 * 按键修饰符
 * @keyup.enter="回调函数"---->是否按下了回车键
 * .13----->是否按下了回车键
 * 
 * 表单数据的绑定: v-model 指令,一般用在表单标签中
 * 通过v-model指令和单选框和复选框配合使用的时候,如果v-model指令中对应的表达式的值和单选框或者复选框中的value属性值是对应的,那么该单选框或者复选框是可以被选中的,当然,下拉框(select)也可以设置某个option标签中的内容默认是否被选中
 * 
 * 
 * Vue中的生命周期: 所谓的生命周期无非就是指Vue的实例对象从生到销毁的过程,该过程中会自动的触发相关的回调函数(回调函数也可以叫回调钩子),一共有11个(就是Vue的实例对象从生到死的过程)
 * 8个常用,2个和keep-alive有关,1个和错误信息有关
 * 数据--->数据对象中的数据---->数据对象data--->data中的数据
 * beforeCreate() 数据初始化之前会调用
 * created() 数据初始化之后会调用
 * beforeMount()页面加载之前
 * mounted()页面加载之后
 * beforeUpdate() 页面重新渲染之前(数据发生变化,页面可能会重新的更新)
 * updated()页面重新渲染之后
 * beforeDestroy()销毁之前
 * destroyed()销毁之后
 * 
 * 
 * Vue中的过渡和动画,过渡和动画仅仅是动态的样式的代码需要单独书写,其他的几乎都是类似的
 * CSS可以实现动画,Vue中是通过内置组件及过渡样式的配合实现了过渡的效果
 * 
 * 过渡:进入的过渡效果和离开的过渡效果
 * 无论是进入的过渡效果还是离开的过渡效果本身都有三个阶段
 * 进入(显示):进入的开始阶段,进入的过程中阶段,进入后的最终效果阶段
 * 离开(隐藏):离开的开始阶段,离开的过程中阶段,离开后的最终效果阶段
 * 需要配合transition内置组件实现过渡,该组件的使用和html标签使用方式一样,一般需要配合一个name属性来使用
 * <transition name="fade">
 *  <p>哈哈</p>
 * </transition>
 * 总结:如果希望哪个标签有过渡效果,就把该标签放在transition标签中
 * style标签中的样式代码如下:
 * 进入的三个阶段
 * .fade-enter
 * .fade-enter-active
 * .fade-enter-to
 * 离开的三个阶段
 * .fade-leave
 * .fade-leave-active
 * .fade-leave-to
 * 
 * Vue中的过滤器:一般就是用来格式化指定字符串,比如:格式化日期
 * Vue.filter('过滤器的名字',回调函数)
 * 
 * Vue中自定义指令
 * Vue中的指令:内置指令和自定义指令
 * 内置指令(系统自带的):
 * v-mode
 * v-bind
 * v-on
 * v-for
 * v-if v-else v-else-if
 * v-show
 * v-text
 * v-html
 * 自定义指令:
 * 全局自定义指令:也可以在该页面中任何的位置使用
 * Vue.directive()
 * 局部自定义指令:只能应用在当前的Vue的实例对象中对应的el的选择器的容器中
 * 在Vue的实例对象内部
 * directives
 * 
 * 
 * Vue中自定义插件:插件就是一个对象,就是一个功能的集合
 * 定义插件的思路及步骤
 * 先定义对象,然后必须使用install方法,传入Vue的对象参数,该install方法内部,可以定义全局方法,还可以定义指令,还可以定义实例对象的方法,最后暴露
 * 插件使用的步骤:引入,Vue.use(插件)声明使用插件,最后是使用插件中的相关功能
 * 
 * Vue中的key的问题:遍历数据的时候,推荐key的值最好是使用唯一的标识,如果仅仅是展示数据,标识可以是索引
 * 
 * 
 * Vue的开发,可以通过CDN在线引入vue.js文件的方式,也可以在github中搜索vue,下载内部的文件(dist目录中有vue.js)然后本地引入,还可以直接下载安装Vue的脚手架
 * 
 * 
 * 
 * 
 * 
 */